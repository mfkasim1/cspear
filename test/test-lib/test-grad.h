#ifndef CSPEAR_TEST_TEST_LIB_TEST_GRAD_H
#define CSPEAR_TEST_TEST_LIB_TEST_GRAD_H

#include <vector>
#include "gtest/gtest.h"
#include <cspear/cspear>
#include "test_params.h"

namespace {
  template <typename T>
  class GradTest : public testing::Test {};

  using testing::Types;
  TYPED_TEST_SUITE(GradTest, RealNumbers);

  TYPED_TEST(GradTest,Grad1) {
    csp::array<TypeParam> data = {
      {9.26807592, 4.38592717, 8.35050516, 8.52187654, 2.2052744 },
      {9.29849376, 8.81394698, 3.70867992, 8.58137779, 0.37354402},
      {3.67404957, 1.86827367, 8.83848067, 4.27372862, 8.16559377},
      {8.75174191, 0.28820546, 0.64641344, 9.67132827, 7.3625669 },
      {0.13879435, 0.71492338, 4.72413587, 2.73973583, 9.95427759},
      {8.40338513, 5.4604864 , 9.29623734, 2.01418426, 1.38252861},
      {2.54072428, 8.58493701, 5.60967034, 0.79665556, 5.81475742},
      {2.61435795, 0.46037978, 2.17312523, 7.39613753, 4.26697735},
      {3.04328819, 2.13835704, 6.83380302, 5.27798317, 0.0416589 },
      {2.03510258, 7.05033515, 7.37535712, 5.70576973, 1.22932362},
      {9.78295933, 0.71468112, 7.45587804, 2.00646577, 4.98090256},
      {3.19060872, 1.203369  , 7.19002859, 1.98857728, 8.46474157},
      {4.29274511, 4.6430382 , 3.67410258, 6.45041721, 5.10612449},
      {6.88093009, 4.75347029, 2.00621057, 6.76311375, 5.94387029},
      {8.16866413, 6.21781937, 0.43830273, 2.2952069 , 2.12672758},
      {7.56231208, 0.7581376 , 4.11709424, 1.15051448, 1.01766586},
      {1.29529266, 7.80804662, 4.99167951, 3.17525517, 5.71536726},
      {6.64260106, 5.63583526, 9.02122635, 3.47287535, 7.93886935},
      {3.88324419, 7.35911711, 4.59703443, 7.36001994, 1.7682204 },
      {8.80340173, 3.35996323, 0.67109559, 1.32790919, 1.90724414}
    };

    // diff on axis = 0
    auto b = csp::diff(data, 0);
    std::vector<int> bshape = {19,5};
    std::vector<TypeParam> bdata = {
      0.03041784,  4.42801981, -4.64182524,  0.05950125, -1.83173038,
     -5.62444419, -6.94567331,  5.12980075, -4.30764917,  7.79204975,
      5.07769234, -1.58006821, -8.19206723,  5.39759965, -0.80302687,
     -8.61294756,  0.42671792,  4.07772243, -6.93159244,  2.59171069,
      8.26459078,  4.74556302,  4.57210147, -0.72555157, -8.57174898,
     -5.86266085,  3.12445061, -3.686567  , -1.2175287 ,  4.43222881,
      0.07363367, -8.12455723, -3.43654511,  6.59948197, -1.54778007,
      0.42893024,  1.67797726,  4.66067779, -2.11815436, -4.22531845,
     -1.00818561,  4.91197811,  0.5415541 ,  0.42778656,  1.18766472,
      7.74785675, -6.33565403,  0.08052092, -3.69930396,  3.75157894,
     -6.59235061,  0.48868788, -0.26584945, -0.01788849,  3.48383901,
      1.10213639,  3.4396692 , -3.51592601,  4.46183993, -3.35861708,
      2.58818498,  0.11043209, -1.66789201,  0.31269654,  0.8377458 ,
      1.28773404,  1.46434908, -1.56790784, -4.46790685, -3.81714271,
     -0.60635205, -5.45968177,  3.67879151, -1.14469242, -1.10906172,
     -6.26701942,  7.04990902,  0.87458527,  2.02474069,  4.6977014 ,
      5.3473084 , -2.17221136,  4.02954684,  0.29762018,  2.22350209,
     -2.75935687,  1.72328185, -4.42419192,  3.88714459, -6.17064895,
      4.92015754, -3.99915388, -3.92593884, -6.03211075,  0.13902374
    };
    EXPECT_EQ(b.shape(), bshape);
    EXPECT_EQ(b.size(), bdata.size());
    for (int i = 0; i < bdata.size(); ++i) {
      EXPECT_NEAR(bdata[i], b[i], AbsTol<TypeParam>::val);
    }

    // diff on axis = 1
    auto c = csp::diff(data, 1);
    std::vector<int> cshape = {20,4};
    std::vector<TypeParam> cdata = {
      -4.88214875,  3.96457799,  0.17137138, -6.31660214,
      -0.48454678, -5.10526706,  4.87269787, -8.20783377,
      -1.8057759 ,  6.970207  , -4.56475205,  3.89186515,
      -8.46353645,  0.35820798,  9.02491483, -2.30876137,
       0.57612903,  4.00921249, -1.98440004,  7.21454176,
      -2.94289873,  3.83575094, -7.28205308, -0.63165565,
       6.04421273, -2.97526667, -4.81301478,  5.01810186,
      -2.15397817,  1.71274545,  5.2230123 , -3.12916018,
      -0.90493115,  4.69544598, -1.55581985, -5.23632427,
       5.01523257,  0.32502197, -1.66958739, -4.47644611,
      -9.06827821,  6.74119692, -5.44941227,  2.97443679,
      -1.98723972,  5.98665959, -5.20145131,  6.47616429,
       0.35029309, -0.96893562,  2.77631463, -1.34429272,
      -2.1274598 , -2.74725972,  4.75690318, -0.81924346,
      -1.95084476, -5.77951664,  1.85690417, -0.16847932,
      -6.80417448,  3.35895664, -2.96657976, -0.13284862,
       6.51275396, -2.81636711, -1.81642434,  2.54011209,
      -1.0067658 ,  3.38539109, -5.548351  ,  4.465994  ,
       3.47587292, -2.76208268,  2.76298551, -5.59179954,
      -5.4434385 , -2.68886764,  0.6568136 ,  0.57933495
    };
    EXPECT_EQ(c.shape(), cshape);
    EXPECT_EQ(c.size(), cdata.size());
    for (int i = 0; i < cdata.size(); ++i) {
      EXPECT_NEAR(cdata[i], c[i], AbsTol<TypeParam>::val);
    }
  }

  TYPED_TEST(GradTest,Grad2) {
    csp::array<TypeParam> data = {
      {9.26807592, 4.38592717, 8.35050516, 8.52187654, 2.2052744 },
      {9.29849376, 8.81394698, 3.70867992, 8.58137779, 0.37354402},
      {3.67404957, 1.86827367, 8.83848067, 4.27372862, 8.16559377},
      {8.75174191, 0.28820546, 0.64641344, 9.67132827, 7.3625669 },
      {0.13879435, 0.71492338, 4.72413587, 2.73973583, 9.95427759},
      {8.40338513, 5.4604864 , 9.29623734, 2.01418426, 1.38252861},
      {2.54072428, 8.58493701, 5.60967034, 0.79665556, 5.81475742},
      {2.61435795, 0.46037978, 2.17312523, 7.39613753, 4.26697735},
      {3.04328819, 2.13835704, 6.83380302, 5.27798317, 0.0416589 },
      {2.03510258, 7.05033515, 7.37535712, 5.70576973, 1.22932362},
      {9.78295933, 0.71468112, 7.45587804, 2.00646577, 4.98090256},
      {3.19060872, 1.203369  , 7.19002859, 1.98857728, 8.46474157},
      {4.29274511, 4.6430382 , 3.67410258, 6.45041721, 5.10612449},
      {6.88093009, 4.75347029, 2.00621057, 6.76311375, 5.94387029},
      {8.16866413, 6.21781937, 0.43830273, 2.2952069 , 2.12672758},
      {7.56231208, 0.7581376 , 4.11709424, 1.15051448, 1.01766586},
      {1.29529266, 7.80804662, 4.99167951, 3.17525517, 5.71536726},
      {6.64260106, 5.63583526, 9.02122635, 3.47287535, 7.93886935},
      {3.88324419, 7.35911711, 4.59703443, 7.36001994, 1.7682204 },
      {8.80340173, 3.35996323, 0.67109559, 1.32790919, 1.90724414}
    };

    // diff on axis = 0
    auto b = csp::diff(data, 0, 2);
    std::vector<int> bshape = {18,5};
    std::vector<TypeParam> bdata = {
      -5.65486203, -11.37369312,   9.77162599,  -4.36715042,  9.62378013,
      10.70213653,   5.3656051 , -13.32186798,   9.70524882, -8.59507662,
      -13.6906399 ,   2.00678613,  12.26978966, -12.32919209,  3.39473756,
      16.87753834,   4.3188451 ,   0.49437904,   6.20604087,-11.16345967,
      -14.12725163,  -1.62111241,  -8.25866847,  -0.49197713, 13.00397779,
      5.93629452, -11.24900784,   0.25002189,   7.81701067, -5.98000888,
      0.35529657,   9.80253449,   8.0972229 ,  -8.71763633, -2.67753838,
      -1.43711585,   3.23400085,  -4.11912369,   2.54594092,  5.41298317,
      8.75604236, -11.24763214,  -0.46103318,  -4.12709052,  2.56391422,
      -14.34020736,   6.82434191,  -0.34637037,   3.68141547, -0.26773993,
       7.694487  ,   2.95098132,  -3.25007656,   4.47972842, -6.84245609,
       1.48604859,  -3.32923711,   1.848034  ,  -4.14914339,  4.19636288,
      -1.30045094,   1.35391699,   0.09998417,  -4.78060339, -4.65488851,
      -1.89408609,  -6.92403085,   5.24669935,   3.32321443,  2.70808099,
      -5.66066737,  12.50959079,  -2.80420624,   3.16943311,  5.80676312,
      11.61432782,  -9.22212038,   3.15496157,  -1.72712051, -2.47419931,
      -8.10666527,   3.89549321,  -8.45373876,   3.58952441, -8.39415104,
       7.67951441,  -5.72243573,   0.49825308,  -9.91925534,  6.30967269
    };
    EXPECT_EQ(b.shape(), bshape);
    EXPECT_EQ(b.size(), bdata.size());
    for (int i = 0; i < bdata.size(); ++i) {
      EXPECT_NEAR(bdata[i], b[i], AbsTol<TypeParam>::val);
    }

    // diff on axis = 1
    auto c = csp::diff(data, 1, 2);
    std::vector<int> cshape = {20,3};
    std::vector<TypeParam> cdata = {
      8.84672674,  -3.79320661,  -6.48797352,
     -4.62072028,   9.97796493, -13.08053164,
      8.7759829 , -11.53495905,   8.4566172 ,
      8.82174443,   8.66670685, -11.3336762 ,
      3.43308346,  -5.99361253,   9.1989418 ,
      6.77864967, -11.11780402,   6.65039743,
     -9.0194794 ,  -1.83774811,   9.83111664,
      3.86672362,   3.51026685,  -8.35217248,
      5.60037713,  -6.25126583,  -3.68050442,
     -4.6902106 ,  -1.99460936,  -2.80685872,
     15.80947513, -12.19060919,   8.42384906,
      7.97389931, -11.1881109 ,  11.6776156 ,
     -1.31922871,   3.74525025,  -4.12060735,
     -0.61979992,   7.5041629 ,  -5.57614664,
     -3.82867188,   7.63642081,  -2.02538349,
     10.16313112,  -6.3255364 ,   2.83373114,
     -9.32912107,   0.99994277,   4.35653643,
      4.39215689,  -8.93374209,  10.014345  ,
     -6.2379556 ,   5.52506819,  -8.35478505,
      2.75457086,   3.34568124,  -0.07747865
    };
    EXPECT_EQ(c.shape(), cshape);
    EXPECT_EQ(c.size(), cdata.size());
    for (int i = 0; i < cdata.size(); ++i) {
      EXPECT_NEAR(cdata[i], c[i], AbsTol<TypeParam>::val);
    }
  }
}

#endif
