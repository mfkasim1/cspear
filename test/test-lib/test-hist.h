#ifndef CSPEAR_TEST_TEST_LIB_TEST_HIST_H
#define CSPEAR_TEST_TEST_LIB_TEST_HIST_H

#include <vector>
#include "gtest/gtest.h"
#include <cspear/cspear>
#include "test_params.h"

namespace {
  template <typename T>
  class HistTest : public testing::Test {};

  using testing::Types;
  typedef Types<double, float> RealNumbers;
  TYPED_TEST_SUITE(HistTest, RealNumbers);

  TYPED_TEST(HistTest,Hist1) {
    csp::array<TypeParam> data = {
      9.26807592, 4.38592717, 8.35050516, 8.52187654, 2.2052744 ,
      9.29849376, 8.81394698, 3.70867992, 8.58137779, 0.37354402,
      3.67404957, 1.86827367, 8.83848067, 4.27372862, 8.16559377,
      8.75174191, 0.28820546, 0.64641344, 9.67132827, 7.3625669 ,
      0.13879435, 0.71492338, 4.72413587, 2.73973583, 9.95427759,
      8.40338513, 5.4604864 , 9.29623734, 2.01418426, 1.38252861,
      2.54072428, 8.58493701, 5.60967034, 0.79665556, 5.81475742,
      2.61435795, 0.46037978, 2.17312523, 7.39613753, 4.26697735,
      3.04328819, 2.13835704, 6.83380302, 5.27798317, 0.0416589 ,
      2.03510258, 7.05033515, 7.37535712, 5.70576973, 1.22932362,
      9.78295933, 0.71468112, 7.45587804, 2.00646577, 4.98090256,
      3.19060872, 1.203369  , 7.19002859, 1.98857728, 8.46474157,
      4.29274511, 4.6430382 , 3.67410258, 6.45041721, 5.10612449,
      6.88093009, 4.75347029, 2.00621057, 6.76311375, 5.94387029,
      8.16866413, 6.21781937, 0.43830273, 2.2952069 , 2.12672758,
      7.56231208, 0.7581376 , 4.11709424, 1.15051448, 1.01766586,
      1.29529266, 7.80804662, 4.99167951, 3.17525517, 5.71536726,
      6.64260106, 5.63583526, 9.02122635, 3.47287535, 7.93886935,
      3.88324419, 7.35911711, 4.59703443, 7.36001994, 1.7682204 ,
      8.80340173, 3.35996323, 0.67109559, 1.32790919, 1.90724414
    };
    csp::array<TypeParam> xbins =
      {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
    auto count = csp::hist(data, xbins);
    std::vector<int> res = {12, 11, 12, 9, 11, 9, 6, 11, 12, 7};

    EXPECT_EQ(res.size(), count.size());
    for (int i = 0; i < count.size(); ++i) {
      EXPECT_EQ(res[i], count[i]);
    }

    csp::array<TypeParam> xbins2 = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0};
    auto count2 = csp::hist(data, xbins2);
    std::vector<int> res2 = {11, 12, 9, 11, 9, 6, 11, 12};

    EXPECT_EQ(res2.size(), count2.size());
    for (int i = 0; i < count2.size(); ++i) {
      EXPECT_EQ(res2[i], count2[i]);
    }
  }
  TYPED_TEST(HistTest,HistSorted) {
    csp::array<TypeParam> data = {
      0.20624743, 0.50549685, 0.50553058, 0.58733305, 0.65323621,
      0.70017806, 0.79280431, 1.0149874 , 1.0330133 , 1.03486118,
      1.36437328, 1.46259396, 1.56572267, 1.67818148, 1.7027026 ,
      2.18426027, 2.36804127, 2.38879993, 2.39474424, 2.64844858,
      2.65643542, 2.69020342, 2.77422289, 2.85898892, 2.99994682,
      3.14731938, 3.22666409, 3.35346004, 3.35935556, 3.41134098,
      3.58764921, 3.84721077, 3.8947934 , 4.01142754, 4.17491796,
      4.18678813, 4.25683291, 4.53773185, 4.59992146, 4.8777483 ,
      4.97728763, 5.23276626, 5.2416664 , 5.26453143, 5.37268304,
      5.61277321, 5.63443832, 5.63957618, 5.69281456, 5.74196929,
      5.88162698, 5.88337535, 5.97252596, 6.05841839, 6.09269659,
      6.10903466, 6.17644287, 6.18898512, 6.29330146, 6.31945289,
      6.33159893, 6.33757154, 6.36768047, 6.48434505, 6.55039743,
      6.68510739, 6.71346524, 6.72110176, 6.83033359, 6.8784609 ,
      7.08479449, 7.21760198, 7.27009923, 7.31758452, 7.43324544,
      7.63813105, 7.66170018, 7.70799494, 7.76092341, 7.85438068,
      8.0128311 , 8.24354195, 8.41753997, 8.44882388, 8.4827096 ,
      8.51950634, 8.60491404, 8.67516684, 8.71000906, 8.7887466 ,
      8.92312844, 9.16057067, 9.29331118, 9.39900477, 9.41682961,
      9.49921846, 9.83495378, 9.89126465, 9.93754152, 9.9815926
    };
    csp::array<TypeParam> xbins =
      {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
    auto count = csp::hist_sorted(data, xbins);
    std::vector<int> res = {7, 8, 10, 8, 8, 12, 17, 10, 11, 9};

    EXPECT_EQ(res.size(), count.size());
    for (int i = 0; i < count.size(); ++i) {
      EXPECT_EQ(res[i], count[i]);
    }

    csp::array<TypeParam> xbins2 = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0};
    auto count2 = csp::hist_sorted(data, xbins2);
    std::vector<int> res2 = {8, 10, 8, 8, 12, 17, 10, 11};

    EXPECT_EQ(res2.size(), count2.size());
    for (int i = 0; i < count2.size(); ++i) {
      EXPECT_EQ(res2[i], count2[i]);
    }
  }
}

#endif
